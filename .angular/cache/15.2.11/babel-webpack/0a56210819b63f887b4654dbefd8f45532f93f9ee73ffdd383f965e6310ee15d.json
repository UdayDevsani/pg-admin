{"ast":null,"code":"import _asyncToGenerator from \"D:/github/pg-admin/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { ReplaySubject, Subscription, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\nclass ChangeFilterV2 {\n  constructor() {\n    this.subject = new ReplaySubject(1);\n    this.subscriptions = new Subscription();\n  }\n  doFilter(changes) {\n    this.subject.next(changes);\n  }\n  dispose() {\n    this.subscriptions.unsubscribe();\n  }\n  notEmpty(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key]) {\n        const value = changes[key].currentValue;\n        if (value !== undefined && value !== null) {\n          handler(value);\n        }\n      }\n    }));\n  }\n  has(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key]) {\n        const value = changes[key].currentValue;\n        handler(value);\n      }\n    }));\n  }\n  notFirst(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key] && !changes[key].isFirstChange()) {\n        const value = changes[key].currentValue;\n        handler(value);\n      }\n    }));\n  }\n  notFirstAndEmpty(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key] && !changes[key].isFirstChange()) {\n        const value = changes[key].currentValue;\n        if (value !== undefined && value !== null) {\n          handler(value);\n        }\n      }\n    }));\n  }\n}\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\nclass NgxEchartsDirective {\n  constructor(config, el, ngZone) {\n    this.el = el;\n    this.ngZone = ngZone;\n    this.options = null;\n    this.theme = null;\n    this.initOpts = null;\n    this.merge = null;\n    this.autoResize = true;\n    this.loading = false;\n    this.loadingType = 'default';\n    this.loadingOpts = null;\n    // ngx-echarts events\n    this.chartInit = new EventEmitter();\n    this.optionsError = new EventEmitter();\n    // echarts mouse events\n    this.chartClick = this.createLazyEvent('click');\n    this.chartDblClick = this.createLazyEvent('dblclick');\n    this.chartMouseDown = this.createLazyEvent('mousedown');\n    this.chartMouseMove = this.createLazyEvent('mousemove');\n    this.chartMouseUp = this.createLazyEvent('mouseup');\n    this.chartMouseOver = this.createLazyEvent('mouseover');\n    this.chartMouseOut = this.createLazyEvent('mouseout');\n    this.chartGlobalOut = this.createLazyEvent('globalout');\n    this.chartContextMenu = this.createLazyEvent('contextmenu');\n    // echarts events\n    this.chartHighlight = this.createLazyEvent('highlight');\n    this.chartDownplay = this.createLazyEvent('downplay');\n    this.chartSelectChanged = this.createLazyEvent('selectchanged');\n    this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n    this.chartLegendSelected = this.createLazyEvent('legendselected');\n    this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n    this.chartLegendLegendSelectAll = this.createLazyEvent('legendselectall');\n    this.chartLegendLegendInverseSelect = this.createLazyEvent('legendinverseselect');\n    this.chartLegendScroll = this.createLazyEvent('legendscroll');\n    this.chartDataZoom = this.createLazyEvent('datazoom');\n    this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n    this.chartGraphRoam = this.createLazyEvent('graphroam');\n    this.chartGeoRoam = this.createLazyEvent('georoam');\n    this.chartTreeRoam = this.createLazyEvent('treeroam');\n    this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n    this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n    this.chartRestore = this.createLazyEvent('restore');\n    this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n    this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n    this.chartGeoSelectChanged = this.createLazyEvent('geoselectchanged');\n    this.chartGeoSelected = this.createLazyEvent('geoselected');\n    this.chartGeoUnselected = this.createLazyEvent('geounselected');\n    this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n    this.chartBrush = this.createLazyEvent('brush');\n    this.chartBrushEnd = this.createLazyEvent('brushend');\n    this.chartBrushSelected = this.createLazyEvent('brushselected');\n    this.chartGlobalCursorTaken = this.createLazyEvent('globalcursortaken');\n    this.chartRendered = this.createLazyEvent('rendered');\n    this.chartFinished = this.createLazyEvent('finished');\n    this.animationFrameID = null;\n    this.chart$ = new ReplaySubject(1);\n    this.resize$ = new Subject();\n    this.changeFilter = new ChangeFilterV2();\n    this.resizeObFired = false;\n    this.echarts = config.echarts;\n    this.theme = config.theme || null;\n  }\n  ngOnChanges(changes) {\n    this.changeFilter.doFilter(changes);\n  }\n  ngOnInit() {\n    if (!window.ResizeObserver) {\n      throw new Error('please install a polyfill for ResizeObserver');\n    }\n    this.resizeSub = this.resize$.pipe(throttleTime(100, asyncScheduler, {\n      leading: false,\n      trailing: true\n    })).subscribe(() => this.resize());\n    if (this.autoResize) {\n      // https://github.com/xieziyu/ngx-echarts/issues/413\n      this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(entries => {\n        for (const entry of entries) {\n          if (entry.target === this.el.nativeElement) {\n            // Ignore first fire on insertion, no resize actually happened\n            if (!this.resizeObFired) {\n              this.resizeObFired = true;\n            } else {\n              this.animationFrameID = window.requestAnimationFrame(() => {\n                this.resize$.next();\n              });\n            }\n          }\n        }\n      }));\n      this.resizeOb.observe(this.el.nativeElement);\n    }\n    this.changeFilter.notFirstAndEmpty('options', opt => this.onOptionsChange(opt));\n    this.changeFilter.notFirstAndEmpty('merge', opt => this.setOption(opt));\n    this.changeFilter.has('loading', v => this.toggleLoading(!!v));\n    this.changeFilter.notFirst('theme', () => this.refreshChart());\n  }\n  ngOnDestroy() {\n    window.clearTimeout(this.initChartTimer);\n    if (this.resizeSub) {\n      this.resizeSub.unsubscribe();\n    }\n    if (this.animationFrameID) {\n      window.cancelAnimationFrame(this.animationFrameID);\n    }\n    if (this.resizeOb) {\n      this.resizeOb.unobserve(this.el.nativeElement);\n    }\n    if (this.loadingSub) {\n      this.loadingSub.unsubscribe();\n    }\n    this.changeFilter.dispose();\n    this.dispose();\n  }\n  ngAfterViewInit() {\n    this.initChartTimer = window.setTimeout(() => this.initChart());\n  }\n  dispose() {\n    if (this.chart) {\n      if (!this.chart.isDisposed()) {\n        this.chart.dispose();\n      }\n      this.chart = null;\n    }\n  }\n  /**\n   * resize chart\n   */\n  resize() {\n    if (this.chart) {\n      this.chart.resize();\n    }\n  }\n  toggleLoading(loading) {\n    if (this.chart) {\n      loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n    } else {\n      this.loadingSub = this.chart$.subscribe(chart => loading ? chart.showLoading(this.loadingType, this.loadingOpts) : chart.hideLoading());\n    }\n  }\n  setOption(option, opts) {\n    if (this.chart) {\n      try {\n        this.chart.setOption(option, opts);\n      } catch (e) {\n        console.error(e);\n        this.optionsError.emit(e);\n      }\n    }\n  }\n  /**\n   * dispose old chart and create a new one.\n   */\n  refreshChart() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.dispose();\n      yield _this.initChart();\n    })();\n  }\n  createChart() {\n    const dom = this.el.nativeElement;\n    if (window && window.getComputedStyle) {\n      const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n      if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n        dom.style.height = '400px';\n      }\n    }\n    // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n    // otherwise create the function that imitates behaviour above with a provided as is module\n    return this.ngZone.runOutsideAngular(() => {\n      const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n      return load().then(({\n        init\n      }) => init(dom, this.theme, this.initOpts));\n    });\n  }\n  initChart() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.onOptionsChange(_this2.options);\n      if (_this2.merge && _this2.chart) {\n        _this2.setOption(_this2.merge);\n      }\n    })();\n  }\n  onOptionsChange(opt) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (!opt) {\n        return;\n      }\n      if (_this3.chart) {\n        _this3.setOption(_this3.options, true);\n      } else {\n        _this3.chart = yield _this3.createChart();\n        _this3.chart$.next(_this3.chart);\n        _this3.chartInit.emit(_this3.chart);\n        _this3.setOption(_this3.options, true);\n      }\n    })();\n  }\n  // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n  // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n  createLazyEvent(eventName) {\n    return this.chartInit.pipe(switchMap(chart => new Observable(observer => {\n      chart.on(eventName, data => this.ngZone.run(() => observer.next(data)));\n      return () => {\n        if (this.chart) {\n          if (!this.chart.isDisposed()) {\n            chart.off(eventName);\n          }\n        }\n      };\n    })));\n  }\n  static #_ = this.ɵfac = function NgxEchartsDirective_Factory(t) {\n    return new (t || NgxEchartsDirective)(i0.ɵɵdirectiveInject(NGX_ECHARTS_CONFIG), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxEchartsDirective,\n    selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]],\n    inputs: {\n      options: \"options\",\n      theme: \"theme\",\n      initOpts: \"initOpts\",\n      merge: \"merge\",\n      autoResize: \"autoResize\",\n      loading: \"loading\",\n      loadingType: \"loadingType\",\n      loadingOpts: \"loadingOpts\"\n    },\n    outputs: {\n      chartInit: \"chartInit\",\n      optionsError: \"optionsError\",\n      chartClick: \"chartClick\",\n      chartDblClick: \"chartDblClick\",\n      chartMouseDown: \"chartMouseDown\",\n      chartMouseMove: \"chartMouseMove\",\n      chartMouseUp: \"chartMouseUp\",\n      chartMouseOver: \"chartMouseOver\",\n      chartMouseOut: \"chartMouseOut\",\n      chartGlobalOut: \"chartGlobalOut\",\n      chartContextMenu: \"chartContextMenu\",\n      chartHighlight: \"chartHighlight\",\n      chartDownplay: \"chartDownplay\",\n      chartSelectChanged: \"chartSelectChanged\",\n      chartLegendSelectChanged: \"chartLegendSelectChanged\",\n      chartLegendSelected: \"chartLegendSelected\",\n      chartLegendUnselected: \"chartLegendUnselected\",\n      chartLegendLegendSelectAll: \"chartLegendLegendSelectAll\",\n      chartLegendLegendInverseSelect: \"chartLegendLegendInverseSelect\",\n      chartLegendScroll: \"chartLegendScroll\",\n      chartDataZoom: \"chartDataZoom\",\n      chartDataRangeSelected: \"chartDataRangeSelected\",\n      chartGraphRoam: \"chartGraphRoam\",\n      chartGeoRoam: \"chartGeoRoam\",\n      chartTreeRoam: \"chartTreeRoam\",\n      chartTimelineChanged: \"chartTimelineChanged\",\n      chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n      chartRestore: \"chartRestore\",\n      chartDataViewChanged: \"chartDataViewChanged\",\n      chartMagicTypeChanged: \"chartMagicTypeChanged\",\n      chartGeoSelectChanged: \"chartGeoSelectChanged\",\n      chartGeoSelected: \"chartGeoSelected\",\n      chartGeoUnselected: \"chartGeoUnselected\",\n      chartAxisAreaSelected: \"chartAxisAreaSelected\",\n      chartBrush: \"chartBrush\",\n      chartBrushEnd: \"chartBrushEnd\",\n      chartBrushSelected: \"chartBrushSelected\",\n      chartGlobalCursorTaken: \"chartGlobalCursorTaken\",\n      chartRendered: \"chartRendered\",\n      chartFinished: \"chartFinished\"\n    },\n    exportAs: [\"echarts\"],\n    standalone: true,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxEchartsDirective, [{\n    type: Directive,\n    args: [{\n      standalone: true,\n      selector: 'echarts, [echarts]',\n      exportAs: 'echarts'\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGX_ECHARTS_CONFIG]\n    }]\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    options: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    initOpts: [{\n      type: Input\n    }],\n    merge: [{\n      type: Input\n    }],\n    autoResize: [{\n      type: Input\n    }],\n    loading: [{\n      type: Input\n    }],\n    loadingType: [{\n      type: Input\n    }],\n    loadingOpts: [{\n      type: Input\n    }],\n    chartInit: [{\n      type: Output\n    }],\n    optionsError: [{\n      type: Output\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartDblClick: [{\n      type: Output\n    }],\n    chartMouseDown: [{\n      type: Output\n    }],\n    chartMouseMove: [{\n      type: Output\n    }],\n    chartMouseUp: [{\n      type: Output\n    }],\n    chartMouseOver: [{\n      type: Output\n    }],\n    chartMouseOut: [{\n      type: Output\n    }],\n    chartGlobalOut: [{\n      type: Output\n    }],\n    chartContextMenu: [{\n      type: Output\n    }],\n    chartHighlight: [{\n      type: Output\n    }],\n    chartDownplay: [{\n      type: Output\n    }],\n    chartSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelectChanged: [{\n      type: Output\n    }],\n    chartLegendSelected: [{\n      type: Output\n    }],\n    chartLegendUnselected: [{\n      type: Output\n    }],\n    chartLegendLegendSelectAll: [{\n      type: Output\n    }],\n    chartLegendLegendInverseSelect: [{\n      type: Output\n    }],\n    chartLegendScroll: [{\n      type: Output\n    }],\n    chartDataZoom: [{\n      type: Output\n    }],\n    chartDataRangeSelected: [{\n      type: Output\n    }],\n    chartGraphRoam: [{\n      type: Output\n    }],\n    chartGeoRoam: [{\n      type: Output\n    }],\n    chartTreeRoam: [{\n      type: Output\n    }],\n    chartTimelineChanged: [{\n      type: Output\n    }],\n    chartTimelinePlayChanged: [{\n      type: Output\n    }],\n    chartRestore: [{\n      type: Output\n    }],\n    chartDataViewChanged: [{\n      type: Output\n    }],\n    chartMagicTypeChanged: [{\n      type: Output\n    }],\n    chartGeoSelectChanged: [{\n      type: Output\n    }],\n    chartGeoSelected: [{\n      type: Output\n    }],\n    chartGeoUnselected: [{\n      type: Output\n    }],\n    chartAxisAreaSelected: [{\n      type: Output\n    }],\n    chartBrush: [{\n      type: Output\n    }],\n    chartBrushEnd: [{\n      type: Output\n    }],\n    chartBrushSelected: [{\n      type: Output\n    }],\n    chartGlobalCursorTaken: [{\n      type: Output\n    }],\n    chartRendered: [{\n      type: Output\n    }],\n    chartFinished: [{\n      type: Output\n    }]\n  });\n})();\nconst provideEcharts = (config = {}) => {\n  return {\n    provide: NGX_ECHARTS_CONFIG,\n    useFactory: () => ({\n      ...config,\n      echarts: () => import('echarts')\n    })\n  };\n};\nconst provideEchartsCore = config => {\n  return {\n    provide: NGX_ECHARTS_CONFIG,\n    useValue: config\n  };\n};\nclass NgxEchartsModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxEchartsModule,\n      providers: [provideEchartsCore(config)]\n    };\n  }\n  static forChild() {\n    return {\n      ngModule: NgxEchartsModule\n    };\n  }\n  static #_ = this.ɵfac = function NgxEchartsModule_Factory(t) {\n    return new (t || NgxEchartsModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxEchartsModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxEchartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxEchartsDirective],\n      exports: [NgxEchartsDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule, provideEcharts, provideEchartsCore };","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","Directive","Inject","Input","Output","NgModule","ReplaySubject","Subscription","Subject","asyncScheduler","Observable","throttleTime","switchMap","ChangeFilterV2","constructor","subject","subscriptions","doFilter","changes","next","dispose","unsubscribe","notEmpty","key","handler","add","subscribe","value","currentValue","undefined","has","notFirst","isFirstChange","notFirstAndEmpty","NGX_ECHARTS_CONFIG","NgxEchartsDirective","config","el","ngZone","options","theme","initOpts","merge","autoResize","loading","loadingType","loadingOpts","chartInit","optionsError","chartClick","createLazyEvent","chartDblClick","chartMouseDown","chartMouseMove","chartMouseUp","chartMouseOver","chartMouseOut","chartGlobalOut","chartContextMenu","chartHighlight","chartDownplay","chartSelectChanged","chartLegendSelectChanged","chartLegendSelected","chartLegendUnselected","chartLegendLegendSelectAll","chartLegendLegendInverseSelect","chartLegendScroll","chartDataZoom","chartDataRangeSelected","chartGraphRoam","chartGeoRoam","chartTreeRoam","chartTimelineChanged","chartTimelinePlayChanged","chartRestore","chartDataViewChanged","chartMagicTypeChanged","chartGeoSelectChanged","chartGeoSelected","chartGeoUnselected","chartAxisAreaSelected","chartBrush","chartBrushEnd","chartBrushSelected","chartGlobalCursorTaken","chartRendered","chartFinished","animationFrameID","chart$","resize$","changeFilter","resizeObFired","echarts","ngOnChanges","ngOnInit","window","ResizeObserver","Error","resizeSub","pipe","leading","trailing","resize","resizeOb","runOutsideAngular","entries","entry","target","nativeElement","requestAnimationFrame","observe","opt","onOptionsChange","setOption","v","toggleLoading","refreshChart","ngOnDestroy","clearTimeout","initChartTimer","cancelAnimationFrame","unobserve","loadingSub","ngAfterViewInit","setTimeout","initChart","chart","isDisposed","showLoading","hideLoading","option","opts","e","console","error","emit","createChart","dom","getComputedStyle","prop","getPropertyValue","style","height","load","Promise","resolve","then","init","eventName","observer","on","data","run","off","ɵfac","ElementRef","NgZone","ɵdir","type","args","standalone","selector","exportAs","decorators","provideEcharts","provide","useFactory","provideEchartsCore","useValue","NgxEchartsModule","forRoot","ngModule","providers","forChild","ɵmod","ɵinj","imports","exports"],"sources":["D:/github/pg-admin/node_modules/ngx-echarts/fesm2022/ngx-echarts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { ReplaySubject, Subscription, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\n\nclass ChangeFilterV2 {\n    constructor() {\n        this.subject = new ReplaySubject(1);\n        this.subscriptions = new Subscription();\n    }\n    doFilter(changes) {\n        this.subject.next(changes);\n    }\n    dispose() {\n        this.subscriptions.unsubscribe();\n    }\n    notEmpty(key, handler) {\n        this.subscriptions.add(this.subject.subscribe(changes => {\n            if (changes[key]) {\n                const value = changes[key].currentValue;\n                if (value !== undefined && value !== null) {\n                    handler(value);\n                }\n            }\n        }));\n    }\n    has(key, handler) {\n        this.subscriptions.add(this.subject.subscribe(changes => {\n            if (changes[key]) {\n                const value = changes[key].currentValue;\n                handler(value);\n            }\n        }));\n    }\n    notFirst(key, handler) {\n        this.subscriptions.add(this.subject.subscribe(changes => {\n            if (changes[key] && !changes[key].isFirstChange()) {\n                const value = changes[key].currentValue;\n                handler(value);\n            }\n        }));\n    }\n    notFirstAndEmpty(key, handler) {\n        this.subscriptions.add(this.subject.subscribe(changes => {\n            if (changes[key] && !changes[key].isFirstChange()) {\n                const value = changes[key].currentValue;\n                if (value !== undefined && value !== null) {\n                    handler(value);\n                }\n            }\n        }));\n    }\n}\n\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\nclass NgxEchartsDirective {\n    constructor(config, el, ngZone) {\n        this.el = el;\n        this.ngZone = ngZone;\n        this.options = null;\n        this.theme = null;\n        this.initOpts = null;\n        this.merge = null;\n        this.autoResize = true;\n        this.loading = false;\n        this.loadingType = 'default';\n        this.loadingOpts = null;\n        // ngx-echarts events\n        this.chartInit = new EventEmitter();\n        this.optionsError = new EventEmitter();\n        // echarts mouse events\n        this.chartClick = this.createLazyEvent('click');\n        this.chartDblClick = this.createLazyEvent('dblclick');\n        this.chartMouseDown = this.createLazyEvent('mousedown');\n        this.chartMouseMove = this.createLazyEvent('mousemove');\n        this.chartMouseUp = this.createLazyEvent('mouseup');\n        this.chartMouseOver = this.createLazyEvent('mouseover');\n        this.chartMouseOut = this.createLazyEvent('mouseout');\n        this.chartGlobalOut = this.createLazyEvent('globalout');\n        this.chartContextMenu = this.createLazyEvent('contextmenu');\n        // echarts events\n        this.chartHighlight = this.createLazyEvent('highlight');\n        this.chartDownplay = this.createLazyEvent('downplay');\n        this.chartSelectChanged = this.createLazyEvent('selectchanged');\n        this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n        this.chartLegendSelected = this.createLazyEvent('legendselected');\n        this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n        this.chartLegendLegendSelectAll = this.createLazyEvent('legendselectall');\n        this.chartLegendLegendInverseSelect = this.createLazyEvent('legendinverseselect');\n        this.chartLegendScroll = this.createLazyEvent('legendscroll');\n        this.chartDataZoom = this.createLazyEvent('datazoom');\n        this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n        this.chartGraphRoam = this.createLazyEvent('graphroam');\n        this.chartGeoRoam = this.createLazyEvent('georoam');\n        this.chartTreeRoam = this.createLazyEvent('treeroam');\n        this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n        this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n        this.chartRestore = this.createLazyEvent('restore');\n        this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n        this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n        this.chartGeoSelectChanged = this.createLazyEvent('geoselectchanged');\n        this.chartGeoSelected = this.createLazyEvent('geoselected');\n        this.chartGeoUnselected = this.createLazyEvent('geounselected');\n        this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n        this.chartBrush = this.createLazyEvent('brush');\n        this.chartBrushEnd = this.createLazyEvent('brushend');\n        this.chartBrushSelected = this.createLazyEvent('brushselected');\n        this.chartGlobalCursorTaken = this.createLazyEvent('globalcursortaken');\n        this.chartRendered = this.createLazyEvent('rendered');\n        this.chartFinished = this.createLazyEvent('finished');\n        this.animationFrameID = null;\n        this.chart$ = new ReplaySubject(1);\n        this.resize$ = new Subject();\n        this.changeFilter = new ChangeFilterV2();\n        this.resizeObFired = false;\n        this.echarts = config.echarts;\n        this.theme = config.theme || null;\n    }\n    ngOnChanges(changes) {\n        this.changeFilter.doFilter(changes);\n    }\n    ngOnInit() {\n        if (!window.ResizeObserver) {\n            throw new Error('please install a polyfill for ResizeObserver');\n        }\n        this.resizeSub = this.resize$\n            .pipe(throttleTime(100, asyncScheduler, { leading: false, trailing: true }))\n            .subscribe(() => this.resize());\n        if (this.autoResize) {\n            // https://github.com/xieziyu/ngx-echarts/issues/413\n            this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(entries => {\n                for (const entry of entries) {\n                    if (entry.target === this.el.nativeElement) {\n                        // Ignore first fire on insertion, no resize actually happened\n                        if (!this.resizeObFired) {\n                            this.resizeObFired = true;\n                        }\n                        else {\n                            this.animationFrameID = window.requestAnimationFrame(() => {\n                                this.resize$.next();\n                            });\n                        }\n                    }\n                }\n            }));\n            this.resizeOb.observe(this.el.nativeElement);\n        }\n        this.changeFilter.notFirstAndEmpty('options', opt => this.onOptionsChange(opt));\n        this.changeFilter.notFirstAndEmpty('merge', opt => this.setOption(opt));\n        this.changeFilter.has('loading', v => this.toggleLoading(!!v));\n        this.changeFilter.notFirst('theme', () => this.refreshChart());\n    }\n    ngOnDestroy() {\n        window.clearTimeout(this.initChartTimer);\n        if (this.resizeSub) {\n            this.resizeSub.unsubscribe();\n        }\n        if (this.animationFrameID) {\n            window.cancelAnimationFrame(this.animationFrameID);\n        }\n        if (this.resizeOb) {\n            this.resizeOb.unobserve(this.el.nativeElement);\n        }\n        if (this.loadingSub) {\n            this.loadingSub.unsubscribe();\n        }\n        this.changeFilter.dispose();\n        this.dispose();\n    }\n    ngAfterViewInit() {\n        this.initChartTimer = window.setTimeout(() => this.initChart());\n    }\n    dispose() {\n        if (this.chart) {\n            if (!this.chart.isDisposed()) {\n                this.chart.dispose();\n            }\n            this.chart = null;\n        }\n    }\n    /**\n     * resize chart\n     */\n    resize() {\n        if (this.chart) {\n            this.chart.resize();\n        }\n    }\n    toggleLoading(loading) {\n        if (this.chart) {\n            loading\n                ? this.chart.showLoading(this.loadingType, this.loadingOpts)\n                : this.chart.hideLoading();\n        }\n        else {\n            this.loadingSub = this.chart$.subscribe(chart => loading ? chart.showLoading(this.loadingType, this.loadingOpts) : chart.hideLoading());\n        }\n    }\n    setOption(option, opts) {\n        if (this.chart) {\n            try {\n                this.chart.setOption(option, opts);\n            }\n            catch (e) {\n                console.error(e);\n                this.optionsError.emit(e);\n            }\n        }\n    }\n    /**\n     * dispose old chart and create a new one.\n     */\n    async refreshChart() {\n        this.dispose();\n        await this.initChart();\n    }\n    createChart() {\n        const dom = this.el.nativeElement;\n        if (window && window.getComputedStyle) {\n            const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n            if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n                dom.style.height = '400px';\n            }\n        }\n        // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n        // otherwise create the function that imitates behaviour above with a provided as is module\n        return this.ngZone.runOutsideAngular(() => {\n            const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n            return load().then(({ init }) => init(dom, this.theme, this.initOpts));\n        });\n    }\n    async initChart() {\n        await this.onOptionsChange(this.options);\n        if (this.merge && this.chart) {\n            this.setOption(this.merge);\n        }\n    }\n    async onOptionsChange(opt) {\n        if (!opt) {\n            return;\n        }\n        if (this.chart) {\n            this.setOption(this.options, true);\n        }\n        else {\n            this.chart = await this.createChart();\n            this.chart$.next(this.chart);\n            this.chartInit.emit(this.chart);\n            this.setOption(this.options, true);\n        }\n    }\n    // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n    createLazyEvent(eventName) {\n        return this.chartInit.pipe(switchMap((chart) => new Observable(observer => {\n            chart.on(eventName, (data) => this.ngZone.run(() => observer.next(data)));\n            return () => {\n                if (this.chart) {\n                    if (!this.chart.isDisposed()) {\n                        chart.off(eventName);\n                    }\n                }\n            };\n        })));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsDirective, deps: [{ token: NGX_ECHARTS_CONFIG }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.0.0\", type: NgxEchartsDirective, isStandalone: true, selector: \"echarts, [echarts]\", inputs: { options: \"options\", theme: \"theme\", initOpts: \"initOpts\", merge: \"merge\", autoResize: \"autoResize\", loading: \"loading\", loadingType: \"loadingType\", loadingOpts: \"loadingOpts\" }, outputs: { chartInit: \"chartInit\", optionsError: \"optionsError\", chartClick: \"chartClick\", chartDblClick: \"chartDblClick\", chartMouseDown: \"chartMouseDown\", chartMouseMove: \"chartMouseMove\", chartMouseUp: \"chartMouseUp\", chartMouseOver: \"chartMouseOver\", chartMouseOut: \"chartMouseOut\", chartGlobalOut: \"chartGlobalOut\", chartContextMenu: \"chartContextMenu\", chartHighlight: \"chartHighlight\", chartDownplay: \"chartDownplay\", chartSelectChanged: \"chartSelectChanged\", chartLegendSelectChanged: \"chartLegendSelectChanged\", chartLegendSelected: \"chartLegendSelected\", chartLegendUnselected: \"chartLegendUnselected\", chartLegendLegendSelectAll: \"chartLegendLegendSelectAll\", chartLegendLegendInverseSelect: \"chartLegendLegendInverseSelect\", chartLegendScroll: \"chartLegendScroll\", chartDataZoom: \"chartDataZoom\", chartDataRangeSelected: \"chartDataRangeSelected\", chartGraphRoam: \"chartGraphRoam\", chartGeoRoam: \"chartGeoRoam\", chartTreeRoam: \"chartTreeRoam\", chartTimelineChanged: \"chartTimelineChanged\", chartTimelinePlayChanged: \"chartTimelinePlayChanged\", chartRestore: \"chartRestore\", chartDataViewChanged: \"chartDataViewChanged\", chartMagicTypeChanged: \"chartMagicTypeChanged\", chartGeoSelectChanged: \"chartGeoSelectChanged\", chartGeoSelected: \"chartGeoSelected\", chartGeoUnselected: \"chartGeoUnselected\", chartAxisAreaSelected: \"chartAxisAreaSelected\", chartBrush: \"chartBrush\", chartBrushEnd: \"chartBrushEnd\", chartBrushSelected: \"chartBrushSelected\", chartGlobalCursorTaken: \"chartGlobalCursorTaken\", chartRendered: \"chartRendered\", chartFinished: \"chartFinished\" }, exportAs: [\"echarts\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    standalone: true,\n                    selector: 'echarts, [echarts]',\n                    exportAs: 'echarts',\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [NGX_ECHARTS_CONFIG]\n                }] }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { options: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], initOpts: [{\n                type: Input\n            }], merge: [{\n                type: Input\n            }], autoResize: [{\n                type: Input\n            }], loading: [{\n                type: Input\n            }], loadingType: [{\n                type: Input\n            }], loadingOpts: [{\n                type: Input\n            }], chartInit: [{\n                type: Output\n            }], optionsError: [{\n                type: Output\n            }], chartClick: [{\n                type: Output\n            }], chartDblClick: [{\n                type: Output\n            }], chartMouseDown: [{\n                type: Output\n            }], chartMouseMove: [{\n                type: Output\n            }], chartMouseUp: [{\n                type: Output\n            }], chartMouseOver: [{\n                type: Output\n            }], chartMouseOut: [{\n                type: Output\n            }], chartGlobalOut: [{\n                type: Output\n            }], chartContextMenu: [{\n                type: Output\n            }], chartHighlight: [{\n                type: Output\n            }], chartDownplay: [{\n                type: Output\n            }], chartSelectChanged: [{\n                type: Output\n            }], chartLegendSelectChanged: [{\n                type: Output\n            }], chartLegendSelected: [{\n                type: Output\n            }], chartLegendUnselected: [{\n                type: Output\n            }], chartLegendLegendSelectAll: [{\n                type: Output\n            }], chartLegendLegendInverseSelect: [{\n                type: Output\n            }], chartLegendScroll: [{\n                type: Output\n            }], chartDataZoom: [{\n                type: Output\n            }], chartDataRangeSelected: [{\n                type: Output\n            }], chartGraphRoam: [{\n                type: Output\n            }], chartGeoRoam: [{\n                type: Output\n            }], chartTreeRoam: [{\n                type: Output\n            }], chartTimelineChanged: [{\n                type: Output\n            }], chartTimelinePlayChanged: [{\n                type: Output\n            }], chartRestore: [{\n                type: Output\n            }], chartDataViewChanged: [{\n                type: Output\n            }], chartMagicTypeChanged: [{\n                type: Output\n            }], chartGeoSelectChanged: [{\n                type: Output\n            }], chartGeoSelected: [{\n                type: Output\n            }], chartGeoUnselected: [{\n                type: Output\n            }], chartAxisAreaSelected: [{\n                type: Output\n            }], chartBrush: [{\n                type: Output\n            }], chartBrushEnd: [{\n                type: Output\n            }], chartBrushSelected: [{\n                type: Output\n            }], chartGlobalCursorTaken: [{\n                type: Output\n            }], chartRendered: [{\n                type: Output\n            }], chartFinished: [{\n                type: Output\n            }] } });\n\nconst provideEcharts = (config = {}) => {\n    return {\n        provide: NGX_ECHARTS_CONFIG,\n        useFactory: () => ({\n            ...config,\n            echarts: () => import('echarts'),\n        }),\n    };\n};\nconst provideEchartsCore = (config) => {\n    return {\n        provide: NGX_ECHARTS_CONFIG,\n        useValue: config,\n    };\n};\nclass NgxEchartsModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxEchartsModule,\n            providers: [provideEchartsCore(config)],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxEchartsModule,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsModule, imports: [NgxEchartsDirective], exports: [NgxEchartsDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.0.0\", ngImport: i0, type: NgxEchartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NgxEchartsDirective],\n                    exports: [NgxEchartsDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule, provideEcharts, provideEchartsCore };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}