{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this._isLoggedIn = false;\n    this.baseUrl = 'http://localhost:5000/api/auth';\n  }\n  initialize() {\n    const loggedIn = localStorage.getItem('isLoggedIn');\n    this._isLoggedIn = loggedIn === 'true';\n  }\n  login(username, password) {\n    return this.http.post(`${this.baseUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      if (response && response.token) {\n        this._isLoggedIn = true;\n        localStorage.setItem('isLoggedIn', 'true');\n        localStorage.setItem('token', response.token);\n      }\n    }));\n  }\n  logout() {\n    this._isLoggedIn = false;\n    localStorage.setItem('isLoggedIn', 'false');\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n  isLoggedIn() {\n    return this._isLoggedIn;\n  }\n  register(user) {\n    return this.http.post(`${this.baseUrl}/register`, user);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAKpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,MAAc,EAAUC,IAAgB;IAAxC,WAAM,GAAND,MAAM;IAAkB,SAAI,GAAJC,IAAI;IAHxC,gBAAW,GAAG,KAAK;IACnB,YAAO,GAAG,gCAAgC;EAEa;EAE/DC,UAAU;IACR,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IACnD,IAAI,CAACC,WAAW,GAAGH,QAAQ,KAAK,MAAM;EACxC;EAEAI,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACG,IAAI,CAC9Ef,GAAG,CAACgB,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAC9B,IAAI,CAACR,WAAW,GAAG,IAAI;QACvBF,YAAY,CAACW,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;QAC1CX,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEF,QAAQ,CAACC,KAAK,CAAC;;IAEjD,CAAC,CAAC,CACH;EACH;EAEAE,MAAM;IACJ,IAAI,CAACV,WAAW,GAAG,KAAK;IACxBF,YAAY,CAACW,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC;IAC3CX,YAAY,CAACa,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAC,UAAU;IACR,OAAO,IAAI,CAACb,WAAW;EACzB;EAEAc,QAAQ,CAACC,IAAS;IAChB,OAAO,IAAI,CAACpB,IAAI,CAACS,IAAI,CAAM,GAAG,IAAI,CAACC,OAAO,WAAW,EAAEU,IAAI,CAAC;EAC9D;EAAC;qBApCUvB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAwB,SAAXxB,WAAW;IAAAyB,YAFV;EAAM","names":["tap","AuthService","constructor","router","http","initialize","loggedIn","localStorage","getItem","_isLoggedIn","login","username","password","post","baseUrl","pipe","response","token","setItem","logout","removeItem","navigate","isLoggedIn","register","user","factory","providedIn"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private _isLoggedIn = false;\n  private baseUrl = 'http://localhost:5000/api/auth';\n\n  constructor(private router: Router, private http: HttpClient) {}\n\n  initialize() {\n    const loggedIn = localStorage.getItem('isLoggedIn');\n    this._isLoggedIn = loggedIn === 'true';\n  }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/login`, { username, password }).pipe(\n      tap(response => {\n        if (response && response.token) {\n          this._isLoggedIn = true;\n          localStorage.setItem('isLoggedIn', 'true');\n          localStorage.setItem('token', response.token);\n        }\n      })\n    );\n  }\n\n  logout(): void {\n    this._isLoggedIn = false;\n    localStorage.setItem('isLoggedIn', 'false');\n    localStorage.removeItem('token');\n    this.router.navigate(['/login']);\n  }\n\n  isLoggedIn(): boolean {\n    return this._isLoggedIn;\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post<any>(`${this.baseUrl}/register`, user);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}