{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, authService, notificationService) {\n    this.fb = fb;\n    this.authService = authService;\n    this.notificationService = notificationService;\n    this.loginError = false;\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n      remember: [false]\n    });\n  }\n  ngOnInit() {}\n  onSubmit() {\n    if (this.loginForm.valid) {\n      const {\n        username,\n        password\n      } = this.loginForm.value;\n      if (!this.authService.login(username, password)) {\n        this.loginError = true;\n        this.notificationService.error('Invalid username or password');\n      }\n    } else {\n      this.showFieldErrors();\n    }\n  }\n  showFieldErrors() {\n    Object.keys(this.loginForm.controls).forEach(field => {\n      const control = this.loginForm.get(field);\n      if (control && control.invalid && (control.dirty || control.touched)) {\n        this.notificationService.error(`Invalid ${field}`);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAS5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,mBAAwC;IAFxC,OAAE,GAAFF,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,wBAAmB,GAAnBC,mBAAmB;IAL7B,eAAU,GAAG,KAAK;IAOhB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,CAAC,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACS,QAAQ,CAAC,CAAC;MACrCE,QAAQ,EAAE,CAAC,KAAK;KACjB,CAAC;EACJ;EAEAC,QAAQ,IAAU;EAElBC,QAAQ;IACN,IAAI,IAAI,CAACP,SAAS,CAACQ,KAAK,EAAE;MACxB,MAAM;QAAEN,QAAQ;QAAEE;MAAQ,CAAE,GAAG,IAAI,CAACJ,SAAS,CAACS,KAAK;MACnD,IAAI,CAAC,IAAI,CAACX,WAAW,CAACY,KAAK,CAACR,QAAQ,EAAEE,QAAQ,CAAC,EAAE;QAC/C,IAAI,CAACO,UAAU,GAAG,IAAI;QACtB,IAAI,CAACZ,mBAAmB,CAACa,KAAK,CAAC,8BAA8B,CAAC;;KAEjE,MAAM;MACL,IAAI,CAACC,eAAe,EAAE;;EAE1B;EAEAA,eAAe;IACbC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACf,SAAS,CAACgB,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAG;MACnD,MAAMC,OAAO,GAAG,IAAI,CAACnB,SAAS,CAACoB,GAAG,CAACF,KAAK,CAAC;MACzC,IAAIC,OAAO,IAAIA,OAAO,CAACE,OAAO,KAAKF,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACI,OAAO,CAAC,EAAE;QACpE,IAAI,CAACxB,mBAAmB,CAACa,KAAK,CAAC,WAAWM,KAAK,EAAE,CAAC;;IAEtD,CAAC,CAAC;EACJ;CACD;AAtCYvB,cAAc,eAL1BF,SAAS,CAAC;EACT+B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW/B,cAAc,CAsC1B;SAtCYA,cAAc","names":["Component","Validators","LoginComponent","constructor","fb","authService","notificationService","loginForm","group","username","required","password","remember","ngOnInit","onSubmit","valid","value","login","loginError","error","showFieldErrors","Object","keys","controls","forEach","field","control","get","invalid","dirty","touched","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService } from '../auth.service';\nimport { NotificationService } from '../notification.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  loginError = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private notificationService: NotificationService\n  ) {\n    this.loginForm = this.fb.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required]],\n      remember: [false]\n    });\n  }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      const { username, password } = this.loginForm.value;\n      if (!this.authService.login(username, password)) {\n        this.loginError = true;\n        this.notificationService.error('Invalid username or password');\n      }\n    } else {\n      this.showFieldErrors();\n    }\n  }\n\n  showFieldErrors(): void {\n    Object.keys(this.loginForm.controls).forEach(field => {\n      const control = this.loginForm.get(field);\n      if (control && control.invalid && (control.dirty || control.touched)) {\n        this.notificationService.error(`Invalid ${field}`);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}