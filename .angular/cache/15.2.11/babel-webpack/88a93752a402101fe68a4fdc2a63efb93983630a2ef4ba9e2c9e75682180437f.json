{"ast":null,"code":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ReportService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:5000/api/reports'; // Base URL for reports API\n  }\n  // Fetch occupancy report data\n  getOccupancyReport() {\n    return this.http.get(`${this.baseUrl}/occupancy`);\n  }\n  // Fetch payment report data\n  getPaymentReport() {\n    return this.http.get(`${this.baseUrl}/payment`);\n  }\n  // Generate PDF report\n  generatePDFReport(reportType, data) {\n    const doc = new jsPDF();\n    const title = `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`;\n    doc.text(title, 20, 10);\n    const headers = reportType === 'occupancy' ? ['Report ID', 'Room Number', 'Occupant Name', 'Occupancy Date'] : ['Report ID', 'Booking ID', 'Amount', 'Payment Date', 'Payment Method', 'Status'];\n    const reportData = reportType === 'occupancy' ? data.map(report => [report.report_id, report.room_number, report.occupant_name, report.occupancy_date]) : data.map(report => [report.report_id, report.booking_id, report.amount, report.payment_date, report.payment_method, report.status]);\n    autoTable(doc, {\n      head: [headers],\n      body: reportData,\n      startY: 20\n    });\n    doc.save(`${reportType}-report.pdf`);\n  }\n  static #_ = this.ɵfac = function ReportService_Factory(t) {\n    return new (t || ReportService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReportService,\n    factory: ReportService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;;;AAKvC,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,mCAAmC,CAAC,CAAC;EAEhB;EAEvC;EACAC,kBAAkB;IAChB,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,GAAG,IAAI,CAACC,OAAO,YAAY,CAAC;EAC1D;EAEA;EACAC,gBAAgB;IACd,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAQ,GAAG,IAAI,CAACC,OAAO,UAAU,CAAC;EACxD;EAEA;EACAE,iBAAiB,CAACC,UAAkB,EAAEC,IAAW;IAC/C,MAAMC,GAAG,GAAG,IAAIZ,KAAK,EAAE;IACvB,MAAMa,KAAK,GAAG,GAAGH,UAAU,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAGL,UAAU,CAACM,KAAK,CAAC,CAAC,CAAC,SAAS;IAElFJ,GAAG,CAACK,IAAI,CAACJ,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC;IAEvB,MAAMK,OAAO,GAAGR,UAAU,KAAK,WAAW,GACxC,CAAC,WAAW,EAAE,aAAa,EAAE,eAAe,EAAE,gBAAgB,CAAC,GAC/D,CAAC,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,cAAc,EAAE,gBAAgB,EAAE,QAAQ,CAAC;IAEnF,MAAMS,UAAU,GAAGT,UAAU,KAAK,WAAW,GAC3CC,IAAI,CAACS,GAAG,CAACC,MAAM,IAAI,CAACA,MAAM,CAACC,SAAS,EAAED,MAAM,CAACE,WAAW,EAAEF,MAAM,CAACG,aAAa,EAAEH,MAAM,CAACI,cAAc,CAAC,CAAC,GACvGd,IAAI,CAACS,GAAG,CAACC,MAAM,IAAI,CAACA,MAAM,CAACC,SAAS,EAAED,MAAM,CAACK,UAAU,EAAEL,MAAM,CAACM,MAAM,EAAEN,MAAM,CAACO,YAAY,EAAEP,MAAM,CAACQ,cAAc,EAAER,MAAM,CAACS,MAAM,CAAC,CAAC;IAErI7B,SAAS,CAACW,GAAG,EAAE;MACbmB,IAAI,EAAE,CAACb,OAAO,CAAC;MACfc,IAAI,EAAEb,UAAU;MAChBc,MAAM,EAAE;KACT,CAAC;IAEFrB,GAAG,CAACsB,IAAI,CAAC,GAAGxB,UAAU,aAAa,CAAC;EACtC;EAAC;qBArCUR,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAiC,SAAbjC,aAAa;IAAAkC,YAFZ;EAAM","names":["jsPDF","autoTable","ReportService","constructor","http","getOccupancyReport","get","baseUrl","getPaymentReport","generatePDFReport","reportType","data","doc","title","charAt","toUpperCase","slice","text","headers","reportData","map","report","report_id","room_number","occupant_name","occupancy_date","booking_id","amount","payment_date","payment_method","status","head","body","startY","save","factory","providedIn"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\services\\reports\\reports.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportService {\n  private baseUrl = 'http://localhost:5000/api/reports'; // Base URL for reports API\n\n  constructor(private http: HttpClient) {}\n\n  // Fetch occupancy report data\n  getOccupancyReport() {\n    return this.http.get<any[]>(`${this.baseUrl}/occupancy`);\n  }\n\n  // Fetch payment report data\n  getPaymentReport() {\n    return this.http.get<any[]>(`${this.baseUrl}/payment`);\n  }\n\n  // Generate PDF report\n  generatePDFReport(reportType: string, data: any[]) {\n    const doc = new jsPDF();\n    const title = `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`;\n\n    doc.text(title, 20, 10);\n\n    const headers = reportType === 'occupancy' ?\n      ['Report ID', 'Room Number', 'Occupant Name', 'Occupancy Date'] :\n      ['Report ID', 'Booking ID', 'Amount', 'Payment Date', 'Payment Method', 'Status'];\n\n    const reportData = reportType === 'occupancy' ?\n      data.map(report => [report.report_id, report.room_number, report.occupant_name, report.occupancy_date]) :\n      data.map(report => [report.report_id, report.booking_id, report.amount, report.payment_date, report.payment_method, report.status]);\n\n    autoTable(doc, {\n      head: [headers],\n      body: reportData,\n      startY: 20\n    });\n\n    doc.save(`${reportType}-report.pdf`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}