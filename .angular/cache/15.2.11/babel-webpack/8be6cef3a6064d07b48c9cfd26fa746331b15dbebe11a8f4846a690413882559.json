{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/room/room.service\";\nexport class AddRoomComponent {\n  constructor(fb, roomService) {\n    this.fb = fb;\n    this.roomService = roomService;\n    this.isEditMode = false;\n    this.roomUpdated = new EventEmitter();\n    this.roomForm = this.fb.group({\n      room_number: [''],\n      type: [''],\n      rent: [''],\n      status: [''],\n      description: ['']\n    });\n  }\n  ngOnChanges() {\n    if (this.isEditMode && this.room) {\n      this.roomForm.patchValue(this.room);\n    } else {\n      this.roomForm.reset();\n    }\n  }\n  onSubmit() {\n    if (this.isEditMode) {\n      this.roomService.updateRoom(this.roomForm.value).subscribe(() => {\n        this.roomUpdated.emit();\n        this.closeModal();\n      });\n    } else {\n      this.roomService.createRoom(this.roomForm.value).subscribe(() => {\n        this.roomUpdated.emit();\n        this.closeModal();\n      });\n    }\n  }\n  closeModal() {\n    const modalElement = document.getElementById('addEditRoomModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n  static #_ = this.ɵfac = function AddRoomComponent_Factory(t) {\n    return new (t || AddRoomComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.RoomService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddRoomComponent,\n    selectors: [[\"app-add-room\"]],\n    inputs: {\n      room: \"room\",\n      isEditMode: \"isEditMode\"\n    },\n    outputs: {\n      roomUpdated: \"roomUpdated\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    template: function AddRoomComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"add-room works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAuB,eAAe;;;;AAWtE,OAAM,MAAOC,gBAAgB;EAQ3BC,YAAoBC,EAAe,EAAUC,WAAwB;IAAjD,OAAE,GAAFD,EAAE;IAAuB,gBAAW,GAAXC,WAAW;IAL/C,eAAU,GAAY,KAAK;IAC1B,gBAAW,GAAG,IAAIJ,YAAY,EAAQ;IAK9C,IAAI,CAACK,QAAQ,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC5BC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,IAAI,EAAE,CAAC,EAAE,CAAC;MACVC,IAAI,EAAE,CAAC,EAAE,CAAC;MACVC,MAAM,EAAE,CAAC,EAAE,CAAC;MACZC,WAAW,EAAE,CAAC,EAAE;KACjB,CAAC;EACJ;EAEAC,WAAW;IACT,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,IAAI,EAAE;MAChC,IAAI,CAACT,QAAQ,CAACU,UAAU,CAAC,IAAI,CAACD,IAAI,CAAC;KACpC,MAAM;MACL,IAAI,CAACT,QAAQ,CAACW,KAAK,EAAE;;EAEzB;EAEAC,QAAQ;IACN,IAAI,IAAI,CAACJ,UAAU,EAAE;MACnB,IAAI,CAACT,WAAW,CAACc,UAAU,CAAC,IAAI,CAACb,QAAQ,CAACc,KAAK,CAAC,CAACC,SAAS,CAAC,MAAK;QAC9D,IAAI,CAACC,WAAW,CAACC,IAAI,EAAE;QACvB,IAAI,CAACC,UAAU,EAAE;MACnB,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACnB,WAAW,CAACoB,UAAU,CAAC,IAAI,CAACnB,QAAQ,CAACc,KAAK,CAAC,CAACC,SAAS,CAAC,MAAK;QAC9D,IAAI,CAACC,WAAW,CAACC,IAAI,EAAE;QACvB,IAAI,CAACC,UAAU,EAAE;MACnB,CAAC,CAAC;;EAEN;EAEAA,UAAU;IACR,MAAME,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,kBAAkB,CAAC;IAChE,MAAMC,KAAK,GAAGC,SAAS,CAACC,KAAK,CAACC,WAAW,CAACN,YAAY,CAAC;IACvDG,KAAK,CAACI,IAAI,EAAE;EACd;EAAC;qBA5CU/B,gBAAgB;EAAA;EAAA;UAAhBA,gBAAgB;IAAAgC;IAAAC;MAAApB;MAAAD;IAAA;IAAAsB;MAAAd;IAAA;IAAAe;IAAAC;IAAAC;IAAAC;MAAA;QCX7BC,yBAAG;QAAAA,+BAAe;QAAAA,iBAAI","names":["EventEmitter","AddRoomComponent","constructor","fb","roomService","roomForm","group","room_number","type","rent","status","description","ngOnChanges","isEditMode","room","patchValue","reset","onSubmit","updateRoom","value","subscribe","roomUpdated","emit","closeModal","createRoom","modalElement","document","getElementById","modal","bootstrap","Modal","getInstance","hide","selectors","inputs","outputs","features","decls","vars","template","i0"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\pages\\rooms\\add-room\\add-room.component.ts","D:\\github\\pg-admin\\src\\app\\pages\\rooms\\add-room\\add-room.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { RoomService } from 'src/app/services/room/room.service';\n\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-add-room',\n  templateUrl: './add-room.component.html',\n  styleUrls: ['./add-room.component.css']\n})\nexport class AddRoomComponent {\n\n  @Input() room: any;\n  @Input() isEditMode: boolean = false;\n  @Output() roomUpdated = new EventEmitter<void>();\n\n  roomForm: FormGroup;\n\n  constructor(private fb: FormBuilder, private roomService: RoomService) {\n    this.roomForm = this.fb.group({\n      room_number: [''],\n      type: [''],\n      rent: [''],\n      status: [''],\n      description: ['']\n    });\n  }\n\n  ngOnChanges() {\n    if (this.isEditMode && this.room) {\n      this.roomForm.patchValue(this.room);\n    } else {\n      this.roomForm.reset();\n    }\n  }\n\n  onSubmit() {\n    if (this.isEditMode) {\n      this.roomService.updateRoom(this.roomForm.value).subscribe(() => {\n        this.roomUpdated.emit();\n        this.closeModal();\n      });\n    } else {\n      this.roomService.createRoom(this.roomForm.value).subscribe(() => {\n        this.roomUpdated.emit();\n        this.closeModal();\n      });\n    }\n  }\n\n  closeModal() {\n    const modalElement = document.getElementById('addEditRoomModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n}\n","<p>add-room works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}