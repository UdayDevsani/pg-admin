{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AddPaymentComponent = class AddPaymentComponent {\n  constructor(fb, paymentService) {\n    this.fb = fb;\n    this.paymentService = paymentService;\n    this.payment = {};\n    this.isEditMode = false;\n    this.paymentUpdated = new EventEmitter();\n    this.paymentForm = this.fb.group({\n      booking_id: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0)]],\n      payment_date: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      status: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    if (this.isEditMode && this.payment) {\n      this.paymentForm.patchValue(this.payment);\n    }\n  }\n  submitForm() {\n    if (this.paymentForm.invalid) {\n      return;\n    }\n    if (this.isEditMode) {\n      const updatedPayment = {\n        ...this.payment,\n        ...this.paymentForm.value\n      };\n      this.paymentService.updatePayment(updatedPayment).subscribe(() => {\n        this.paymentUpdated.emit();\n        this.closeModal();\n      });\n    } else {\n      this.paymentService.createPayment(this.paymentForm.value).subscribe(() => {\n        this.paymentUpdated.emit();\n        this.closeModal();\n      });\n    }\n  }\n  closeModal() {\n    const modalElement = document.getElementById('addEditPaymentModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n};\n__decorate([Input()], AddPaymentComponent.prototype, \"payment\", void 0);\n__decorate([Input()], AddPaymentComponent.prototype, \"isEditMode\", void 0);\n__decorate([Output()], AddPaymentComponent.prototype, \"paymentUpdated\", void 0);\nAddPaymentComponent = __decorate([Component({\n  selector: 'app-add-payment',\n  templateUrl: './add-payment.component.html',\n  styleUrls: ['./add-payment.component.css']\n})], AddPaymentComponent);\nexport { AddPaymentComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,YAAY,QAAgB,eAAe;AAC9E,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAM9BC,YACUC,EAAe,EACfC,cAA8B;IAD9B,OAAE,GAAFD,EAAE;IACF,mBAAc,GAAdC,cAAc;IAPf,YAAO,GAAQ,EAAE;IACjB,eAAU,GAAY,KAAK;IAC1B,mBAAc,GAAG,IAAIL,YAAY,EAAQ;IAOjD,IAAI,CAACM,WAAW,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC/BC,UAAU,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACrCC,MAAM,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACtDC,YAAY,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACQ,QAAQ,CAAC;MACvCI,cAAc,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACQ,QAAQ,CAAC;MACzCK,MAAM,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACQ,QAAQ;KACjC,CAAC;EACJ;EAEAM,QAAQ;IACN,IAAI,IAAI,CAACC,UAAU,IAAI,IAAI,CAACC,OAAO,EAAE;MACnC,IAAI,CAACX,WAAW,CAACY,UAAU,CAAC,IAAI,CAACD,OAAO,CAAC;;EAE7C;EAEAE,UAAU;IACR,IAAI,IAAI,CAACb,WAAW,CAACc,OAAO,EAAE;MAC5B;;IAGF,IAAI,IAAI,CAACJ,UAAU,EAAE;MACnB,MAAMK,cAAc,GAAG;QAAE,GAAG,IAAI,CAACJ,OAAO;QAAE,GAAG,IAAI,CAACX,WAAW,CAACgB;MAAK,CAAE;MACrE,IAAI,CAACjB,cAAc,CAACkB,aAAa,CAACF,cAAc,CAAC,CAACG,SAAS,CAAC,MAAK;QAC/D,IAAI,CAACC,cAAc,CAACC,IAAI,EAAE;QAC1B,IAAI,CAACC,UAAU,EAAE;MACnB,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACtB,cAAc,CAACuB,aAAa,CAAC,IAAI,CAACtB,WAAW,CAACgB,KAAK,CAAC,CAACE,SAAS,CAAC,MAAK;QACvE,IAAI,CAACC,cAAc,CAACC,IAAI,EAAE;QAC1B,IAAI,CAACC,UAAU,EAAE;MACnB,CAAC,CAAC;;EAEN;EAEAA,UAAU;IACR,MAAME,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,qBAAqB,CAAC;IACnE,MAAMC,KAAK,GAAGC,SAAS,CAACC,KAAK,CAACC,WAAW,CAACN,YAAY,CAAC;IACvDG,KAAK,CAACI,IAAI,EAAE;EACd;CACD;AAhDUC,YAARvC,KAAK,EAAE,oDAAmB;AAClBuC,YAARvC,KAAK,EAAE,uDAA6B;AAC3BuC,YAATtC,MAAM,EAAE,2DAA2C;AAHzCG,mBAAmB,eAL/BL,SAAS,CAAC;EACTyC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWtC,mBAAmB,CAiD/B;SAjDYA,mBAAmB","names":["Component","Input","Output","EventEmitter","Validators","AddPaymentComponent","constructor","fb","paymentService","paymentForm","group","booking_id","required","amount","min","payment_date","payment_method","status","ngOnInit","isEditMode","payment","patchValue","submitForm","invalid","updatedPayment","value","updatePayment","subscribe","paymentUpdated","emit","closeModal","createPayment","modalElement","document","getElementById","modal","bootstrap","Modal","getInstance","hide","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\pages\\payment\\add-payment\\add-payment.component.ts"],"sourcesContent":["\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { PaymentService } from 'src/app/services/payment/payment.service';\n\n\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-add-payment',\n  templateUrl: './add-payment.component.html',\n  styleUrls: ['./add-payment.component.css']\n})\nexport class AddPaymentComponent implements OnInit {\n  @Input() payment: any = {};\n  @Input() isEditMode: boolean = false;\n  @Output() paymentUpdated = new EventEmitter<void>();\n  paymentForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n    private paymentService: PaymentService\n  ) {\n    this.paymentForm = this.fb.group({\n      booking_id: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(0)]],\n      payment_date: ['', Validators.required],\n      payment_method: ['', Validators.required],\n      status: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.isEditMode && this.payment) {\n      this.paymentForm.patchValue(this.payment);\n    }\n  }\n\n  submitForm() {\n    if (this.paymentForm.invalid) {\n      return;\n    }\n\n    if (this.isEditMode) {\n      const updatedPayment = { ...this.payment, ...this.paymentForm.value };\n      this.paymentService.updatePayment(updatedPayment).subscribe(() => {\n        this.paymentUpdated.emit();\n        this.closeModal();\n      });\n    } else {\n      this.paymentService.createPayment(this.paymentForm.value).subscribe(() => {\n        this.paymentUpdated.emit();\n        this.closeModal();\n      });\n    }\n  }\n\n  closeModal() {\n    const modalElement = document.getElementById('addEditPaymentModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}