{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { AddUserComponent } from './add-user/add-user.component';\nlet PgUserComponent = class PgUserComponent {\n  constructor(fb, pgUserService) {\n    this.fb = fb;\n    this.pgUserService = pgUserService;\n    this.pgUsers = [];\n    this.isEditMode = false;\n    this.pgUserForm = this.fb.group({\n      fullName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', Validators.required],\n      address: ['', Validators.required],\n      roomId: ['', Validators.required],\n      bookingId: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadPGUsers();\n  }\n  loadPGUsers() {\n    this.pgUserService.getPGUsers().subscribe(users => {\n      this.pgUsers = users;\n    });\n  }\n  openAddPGUserModal() {\n    this.isEditMode = false;\n    this.selectedUser = null;\n    this.pgUserForm.reset();\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = new bootstrap.Modal(modalElement, {\n      backdrop: 'static',\n      keyboard: false\n    });\n    modal.show();\n  }\n  openEditPGUserModal(user) {\n    this.isEditMode = true;\n    this.selectedUser = user;\n    this.pgUserForm.patchValue(user);\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = new bootstrap.Modal(modalElement, {\n      backdrop: 'static',\n      keyboard: false\n    });\n    modal.show();\n  }\n  savePGUser() {\n    if (this.pgUserForm.invalid) {\n      this.pgUserForm.markAllAsTouched();\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Please fill all required fields!'\n      });\n      return;\n    }\n    const pgUserData = this.pgUserForm.value;\n    if (this.isEditMode) {\n      this.pgUserService.updatePGUser(this.selectedUser.pg_user_id, pgUserData).subscribe(() => {\n        Swal.fire('Success', 'PG User updated successfully!', 'success');\n        this.loadPGUsers();\n        this.closeModal();\n      });\n    } else {\n      this.pgUserService.createPGUser(pgUserData).subscribe(() => {\n        Swal.fire('Success', 'PG User added successfully!', 'success');\n        this.loadPGUsers();\n        this.closeModal();\n      });\n    }\n  }\n  deletePGUser(id) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.pgUserService.deletePGUser(id).subscribe(() => {\n          Swal.fire('Deleted!', 'PG User has been deleted.', 'success');\n          this.loadPGUsers();\n        });\n      }\n    });\n  }\n  closeModal() {\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n  onPGUserUpdated() {\n    this.loadPGUsers();\n  }\n};\n__decorate([ViewChild(AddUserComponent)], PgUserComponent.prototype, \"addEditPgUserModal\", void 0);\nPgUserComponent = __decorate([Component({\n  selector: 'app-pg-user',\n  templateUrl: './pg-user.component.html',\n  styleUrls: ['./pg-user.component.css']\n})], PgUserComponent);\nexport { PgUserComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","AddUserComponent","PgUserComponent","constructor","fb","pgUserService","pgUserForm","group","fullName","Validators","required","email","phoneNumber","address","roomId","bookingId","ngOnInit","loadPGUsers","getPGUsers","subscribe","users","pgUsers","openAddPGUserModal","isEditMode","selectedUser","reset","modalElement","document","getElementById","modal","bootstrap","Modal","backdrop","keyboard","show","openEditPGUserModal","user","patchValue","savePGUser","invalid","markAllAsTouched","Swal","fire","icon","title","text","pgUserData","value","updatePGUser","pg_user_id","closeModal","createPGUser","deletePGUser","id","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","isConfirmed","getInstance","hide","onPGUserUpdated","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\github\\pg-admin\\src\\app\\pages\\pg-user\\pg-user.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { PgUserService } from 'src/app/services/pg-user/pg-user.service';\nimport { AddUserComponent } from './add-user/add-user.component';\n\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-pg-user',\n  templateUrl: './pg-user.component.html',\n  styleUrls: ['./pg-user.component.css']\n})\nexport class PgUserComponent implements OnInit {\n  pgUsers: any[] = [];\n  selectedUser: any;\n  isEditMode: boolean = false;\n  pgUserForm: FormGroup;\n\n  @ViewChild(AddUserComponent) addEditPgUserModal: AddUserComponent;\n\n  constructor(private fb: FormBuilder, private pgUserService: PgUserService) {\n    this.pgUserForm = this.fb.group({\n      fullName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      phoneNumber: ['', Validators.required],\n      address: ['', Validators.required],\n      roomId: ['', Validators.required],\n      bookingId: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadPGUsers();\n  }\n\n  loadPGUsers() {\n    this.pgUserService.getPGUsers().subscribe((users) => {\n      this.pgUsers = users;\n    });\n  }\n\n  openAddPGUserModal() {\n    this.isEditMode = false;\n    this.selectedUser = null;\n    this.pgUserForm.reset();\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = new bootstrap.Modal(modalElement, {\n      backdrop: 'static',\n      keyboard: false\n    });\n    modal.show();\n  }\n\n  openEditPGUserModal(user: any) {\n    this.isEditMode = true;\n    this.selectedUser = user;\n    this.pgUserForm.patchValue(user);\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = new bootstrap.Modal(modalElement, {\n      backdrop: 'static',\n      keyboard: false\n    });\n    modal.show();\n  }\n\n  savePGUser() {\n    if (this.pgUserForm.invalid) {\n      this.pgUserForm.markAllAsTouched();\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: 'Please fill all required fields!',\n      });\n      return;\n    }\n\n    const pgUserData = this.pgUserForm.value;\n\n    if (this.isEditMode) {\n      this.pgUserService.updatePGUser(this.selectedUser.pg_user_id, pgUserData).subscribe(() => {\n        Swal.fire('Success', 'PG User updated successfully!', 'success');\n        this.loadPGUsers();\n        this.closeModal();\n      });\n    } else {\n      this.pgUserService.createPGUser(pgUserData).subscribe(() => {\n        Swal.fire('Success', 'PG User added successfully!', 'success');\n        this.loadPGUsers();\n        this.closeModal();\n      });\n    }\n  }\n\n  deletePGUser(id: number) {\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.pgUserService.deletePGUser(id).subscribe(() => {\n          Swal.fire('Deleted!', 'PG User has been deleted.', 'success');\n          this.loadPGUsers();\n        });\n      }\n    });\n  }\n\n  closeModal() {\n    const modalElement = document.getElementById('addEditPGUserModal');\n    const modal = bootstrap.Modal.getInstance(modalElement);\n    modal.hide();\n  }\n\n  onPGUserUpdated() {\n    this.loadPGUsers();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}