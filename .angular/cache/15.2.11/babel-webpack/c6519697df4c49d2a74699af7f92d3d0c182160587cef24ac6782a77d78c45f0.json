{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, ElementRef, NgModule, InjectionToken, Injectable, Inject, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, NgZone, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nclass ToastContainerDirective {\n  constructor(el) {\n    this.el = el;\n  }\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n}\nToastContainerDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[toastContainer]',\n    exportAs: 'toastContainer'\n  }]\n}];\nToastContainerDirective.ctorParameters = () => [{\n  type: ElementRef\n}];\nclass ToastContainerModule {}\nToastContainerModule.decorators = [{\n  type: NgModule,\n  args: [{\n    declarations: [ToastContainerDirective],\n    exports: [ToastContainerDirective]\n  }]\n}];\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this._onTap = new Subject();\n    this._onAction = new Subject();\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n  onAction() {\n    return this._onAction.asObservable();\n  }\n}\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n  payload: null\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n  detach() {\n    const host = this._attachedHost;\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n    this._attachedPortal = undefined;\n    if (this._disposeFn) {\n      this._disposeFn();\n      this._disposeFn = undefined;\n    }\n  }\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n}\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n    let componentRef;\n    // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n    componentRef = componentFactory.create(portal.injector);\n    // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n    this._appRef.attachView(componentRef.hostView);\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n      componentRef.destroy();\n    });\n    // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n  constructor(_document) {\n    this._document = _document;\n  }\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body.\n   */\n  _createContainer() {\n    const container = this._document.createElement('div');\n    container.classList.add('overlay-container');\n    this._document.body.appendChild(container);\n    this._containerElement = container;\n  }\n}\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function OverlayContainer_Factory() {\n    return new OverlayContainer(i0.ɵɵinject(i1.DOCUMENT));\n  },\n  token: OverlayContainer,\n  providedIn: \"root\"\n});\nOverlayContainer.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nOverlayContainer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n  detach() {\n    return this._portalHost.detach();\n  }\n}\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n  constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._document = _document;\n    // Namespace panes by overlay container\n    this._paneElements = new Map();\n  }\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n}\nOverlay.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function Overlay_Factory() {\n    return new Overlay(i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.DOCUMENT));\n  },\n  token: Overlay,\n  providedIn: \"root\"\n});\nOverlay.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nOverlay.ctorParameters = () => [{\n  type: OverlayContainer\n}, {\n  type: ComponentFactoryResolver\n}, {\n  type: ApplicationRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}];\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Count of duplicates of this toast */\n    this.duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n    this._afterClosed = new Subject();\n    /** triggered when toast is activated */\n    this._activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n    this._manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n    this._resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n    this._countDuplicate = new Subject();\n  }\n  manualClose() {\n    this._manualClose.next();\n    this._manualClose.complete();\n  }\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n  close() {\n    this._overlayRef.detach();\n    this._afterClosed.next();\n    this._manualClose.next();\n    this._afterClosed.complete();\n    this._manualClose.complete();\n    this._activate.complete();\n    this._resetTimeout.complete();\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n  isInactive() {\n    return this._activate.isStopped;\n  }\n  activate() {\n    this._activate.next();\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n}\n/** Custom injector type specifically for instantiating components with a toast. */\nclass ToastInjector {\n  constructor(_toastPackage, _parentInjector) {\n    this._toastPackage = _toastPackage;\n    this._parentInjector = _parentInjector;\n  }\n  get(token, notFoundValue, flags) {\n    if (token === ToastPackage) {\n      return this._toastPackage;\n    }\n    return this._parentInjector.get(token, notFoundValue, flags);\n  }\n}\nclass ToastrService {\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.currentlyActive = 0;\n    this.toasts = [];\n    this.index = 0;\n    this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n    }\n  }\n  /** show toast */\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n  remove(toastId) {\n    const found = this._findToast(toastId);\n    if (!found) {\n      return false;\n    }\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n  applyConfig(override = {}) {\n    return Object.assign(Object.assign({}, this.toastrConfig), override);\n  }\n  /**\n   * Find toast object by id\n   */\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    }\n    // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n    this.previousToastMessage = message;\n    let keepInactive = false;\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    const toastInjector = new ToastInjector(toastPackage, this._injector);\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n    this.toasts.push(ins);\n    return ins;\n  }\n}\nToastrService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ToastrService_Factory() {\n    return new ToastrService(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n  },\n  token: ToastrService,\n  providedIn: \"root\"\n});\nToastrService.decorators = [{\n  type: Injectable,\n  args: [{\n    providedIn: 'root'\n  }]\n}];\nToastrService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [TOAST_CONFIG]\n  }]\n}, {\n  type: Overlay\n}, {\n  type: Injector\n}, {\n  type: DomSanitizer\n}, {\n  type: NgZone\n}];\nclass Toast {\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    /** width of progress bar */\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n    this.toastClasses = '';\n    /** controls animation */\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n    return;\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'active'\n    });\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = Object.assign(Object.assign({}, this.state), {\n      value: 'removed'\n    });\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n}\nToast.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[toast-component]',\n    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n    animations: [trigger('flyInOut', [state('inactive', style({\n      opacity: 0\n    })), state('active', style({\n      opacity: 1\n    })), state('removed', style({\n      opacity: 0\n    })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n    preserveWhitespaces: false\n  }]\n}];\nToast.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: NgZone\n}];\nToast.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  state: [{\n    type: HostBinding,\n    args: ['@flyInOut']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nconst DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: Toast\n});\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n}\nToastrModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [Toast],\n    exports: [Toast],\n    entryComponents: [Toast]\n  }]\n}];\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n}\nToastrComponentlessModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule]\n  }]\n}];\nclass ToastNoAnimation {\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    /** width of progress bar */\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n    this.toastClasses = '';\n    /** controls animation */\n    this.state = 'inactive';\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n  activateToast() {\n    this.state = 'active';\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n    this.toastPackage.triggerTap();\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0;\n    // disable progressBar\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n}\nToastNoAnimation.decorators = [{\n  type: Component,\n  args: [{\n    selector: '[toast-component]',\n    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n  }]\n}];\nToastNoAnimation.ctorParameters = () => [{\n  type: ToastrService\n}, {\n  type: ToastPackage\n}, {\n  type: ApplicationRef\n}];\nToastNoAnimation.propDecorators = {\n  toastClasses: [{\n    type: HostBinding,\n    args: ['class']\n  }],\n  displayStyle: [{\n    type: HostBinding,\n    args: ['style.display']\n  }],\n  tapToast: [{\n    type: HostListener,\n    args: ['click']\n  }],\n  stickAround: [{\n    type: HostListener,\n    args: ['mouseenter']\n  }],\n  delayedHideToast: [{\n    type: HostListener,\n    args: ['mouseleave']\n  }]\n};\nconst DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), {\n  toastComponent: ToastNoAnimation\n});\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n}\nToastNoAnimationModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [ToastNoAnimation],\n    exports: [ToastNoAnimation],\n    entryComponents: [ToastNoAnimation]\n  }]\n}];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };","map":{"version":3,"names":["i0","Directive","ElementRef","NgModule","InjectionToken","Injectable","Inject","ComponentFactoryResolver","ApplicationRef","SecurityContext","Injector","NgZone","Component","HostBinding","HostListener","trigger","state","style","transition","animate","Subject","i3","DomSanitizer","i1","DOCUMENT","CommonModule","ToastContainerDirective","constructor","el","getContainerElement","nativeElement","decorators","type","args","selector","exportAs","ctorParameters","ToastContainerModule","declarations","exports","ToastPackage","toastId","config","message","title","toastType","toastRef","_onTap","_onAction","afterClosed","subscribe","complete","triggerTap","next","tapToDismiss","onTap","asObservable","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","newestOnTop","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","payload","TOAST_CONFIG","ComponentPortal","component","injector","attach","host","_attachedHost","detach","undefined","isAttached","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayContainer","_document","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","createElement","classList","add","body","ɵprov","ɵɵdefineInjectable","factory","OverlayContainer_Factory","ɵɵinject","token","providedIn","OverlayRef","_portalHost","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","Overlay_Factory","ToastRef","_overlayRef","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","manualClosed","timeoutReset","countDuplicate","close","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastInjector","_toastPackage","_parentInjector","notFoundValue","flags","ToastrService","overlay","_injector","sanitizer","ngZone","currentlyActive","toasts","index","toastrConfig","Object","assign","default","show","override","_preBuildNotification","applyConfig","clear","toast","remove","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","toastInjector","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","ToastrService_Factory","INJECTOR","Toast","toastrService","width","toastClasses","value","params","options","originalTimeout","sub","activateToast","sub1","sub2","sub3","count","displayStyle","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","template","animations","opacity","preserveWhitespaces","propDecorators","DefaultGlobalConfig","ToastrModule","forRoot","ngModule","providers","provide","useValue","imports","entryComponents","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"sources":["D:/github/pg-admin/node_modules/ngx-toastr/fesm2015/ngx-toastr.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, ElementRef, NgModule, InjectionToken, Injectable, Inject, ComponentFactoryResolver, ApplicationRef, SecurityContext, Injector, NgZone, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\n\nclass ToastContainerDirective {\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n}\nToastContainerDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[toastContainer]',\n                exportAs: 'toastContainer',\n            },] }\n];\nToastContainerDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nclass ToastContainerModule {\n}\nToastContainerModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [ToastContainerDirective],\n                exports: [ToastContainerDirective],\n            },] }\n];\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this._onTap = new Subject();\n        this._onAction = new Subject();\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n    payload: null\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    constructor(_document) {\n        this._document = _document;\n    }\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵprov = i0.ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(i0.ɵɵinject(i1.DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._document = _document;\n        // Namespace panes by overlay container\n        this._paneElements = new Map();\n    }\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n}\nOverlay.ɵprov = i0.ɵɵdefineInjectable({ factory: function Overlay_Factory() { return new Overlay(i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i1.DOCUMENT)); }, token: Overlay, providedIn: \"root\" });\nOverlay.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nOverlay.ctorParameters = () => [\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Count of duplicates of this toast */\n        this.duplicatesCount = 0;\n        /** Subject for notifying the user that the toast has finished closing. */\n        this._afterClosed = new Subject();\n        /** triggered when toast is activated */\n        this._activate = new Subject();\n        /** notifies the toast that it should close before the timeout */\n        this._manualClose = new Subject();\n        /** notifies the toast that it should reset the timeouts */\n        this._resetTimeout = new Subject();\n        /** notifies the toast that it should count a duplicate toast */\n        this._countDuplicate = new Subject();\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n/** Custom injector type specifically for instantiating components with a toast. */\nclass ToastInjector {\n    constructor(_toastPackage, _parentInjector) {\n        this._toastPackage = _toastPackage;\n        this._parentInjector = _parentInjector;\n    }\n    get(token, notFoundValue, flags) {\n        if (token === ToastPackage) {\n            return this._toastPackage;\n        }\n        return this._parentInjector.get(token, notFoundValue, flags);\n    }\n}\n\nclass ToastrService {\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.currentlyActive = 0;\n        this.toasts = [];\n        this.index = 0;\n        this.toastrConfig = Object.assign(Object.assign({}, token.default), token.config);\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = Object.assign(Object.assign({}, token.default.iconClasses), token.config.iconClasses);\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return Object.assign(Object.assign({}, this.toastrConfig), override);\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        const toastInjector = new ToastInjector(toastPackage, this._injector);\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n}\nToastrService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ToastrService_Factory() { return new ToastrService(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i3.DomSanitizer), i0.ɵɵinject(i0.NgZone)); }, token: ToastrService, providedIn: \"root\" });\nToastrService.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\nToastrService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [TOAST_CONFIG,] }] },\n    { type: Overlay },\n    { type: Injector },\n    { type: DomSanitizer },\n    { type: NgZone }\n];\n\nclass Toast {\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in'\n            }\n        };\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state.value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'active' });\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'active' });\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = Object.assign(Object.assign({}, this.state), { value: 'removed' });\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n}\nToast.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alertdialog\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                animations: [\n                    trigger('flyInOut', [\n                        state('inactive', style({ opacity: 0 })),\n                        state('active', style({ opacity: 1 })),\n                        state('removed', style({ opacity: 0 })),\n                        transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                        transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n                    ])\n                ],\n                preserveWhitespaces: false\n            },] }\n];\nToast.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: NgZone }\n];\nToast.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    state: [{ type: HostBinding, args: ['@flyInOut',] }],\n    displayStyle: [{ type: HostBinding, args: ['style.display',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\n\nconst DefaultGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), { toastComponent: Toast });\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [Toast],\n                exports: [Toast],\n                entryComponents: [Toast],\n            },] }\n];\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrComponentlessModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n            },] }\n];\n\nclass ToastNoAnimation {\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = 'inactive';\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state === 'inactive') {\n            return 'none';\n        }\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = 'active';\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n}\nToastNoAnimation.decorators = [\n    { type: Component, args: [{\n                selector: '[toast-component]',\n                template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\" aria-live=\"polite\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n            },] }\n];\nToastNoAnimation.ctorParameters = () => [\n    { type: ToastrService },\n    { type: ToastPackage },\n    { type: ApplicationRef }\n];\nToastNoAnimation.propDecorators = {\n    toastClasses: [{ type: HostBinding, args: ['class',] }],\n    displayStyle: [{ type: HostBinding, args: ['style.display',] }],\n    tapToast: [{ type: HostListener, args: ['click',] }],\n    stickAround: [{ type: HostListener, args: ['mouseenter',] }],\n    delayedHideToast: [{ type: HostListener, args: ['mouseleave',] }]\n};\nconst DefaultNoAnimationsGlobalConfig = Object.assign(Object.assign({}, DefaultNoComponentGlobalConfig), { toastComponent: ToastNoAnimation });\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastNoAnimationModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [ToastNoAnimation],\n                exports: [ToastNoAnimation],\n                entryComponents: [ToastNoAnimation],\n            },] }\n];\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastInjector, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}